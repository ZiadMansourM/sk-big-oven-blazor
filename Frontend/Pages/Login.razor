@page "/login"
@inject HttpClient http
@inject NavigationManager navManager
@inject ILocalStorageService localStorage

<PageTitle>Login</PageTitle>

<template x-for="(msg, index) in errMsgs" :key="index">
    <div class="alert alert-danger-custom shadow p-3 mb-4 bg-body-custom rounded" role="alert">
        <a x-text="msg" class="btn-alert-cls link" data-bs-toggle="modal" data-bs-target="#recipePolcy">
        </a>
    </div>
</template>
<div class="form-signin">
    <EditForm Model="@user" OnValidSubmit="@LoginUser">
        <h1 class="h3 mb-3 fw-normal">Sign In</h1>
        <div class="form-floating pb-2">
            <InputText @bind-Value="user.Username" type="text" class="form-control" id="floatingInputRegister" placeholder="Enter username" required />
            <label for="floatingInputRegister">Username</label>
        </div>
        <div class="form-floating pb-2">
            <InputText @bind-Value="user.Password" type="password" class="form-control" id="floatingPasswordSignin" placeholder="Password" required />
            <label for="floatingPasswordSignin">Password</label>
        </div>
        <button type="submit" class="w-100 btn btn-lg btn-primary">Sign In</button>
    </EditForm>
</div>

@code {
    private Models.UserDTO user = new();

    private async Task LoginUser()
    {
        var response = await http.PostAsJsonAsync("login", user);
        string json = await response.Content.ReadAsStringAsync();
        TempUser createdUser = Newtonsoft.Json
            .JsonConvert.DeserializeObject<TempUser>(json)!;
        await localStorage.SetItemAsync("userId", createdUser.id);
        await localStorage.SetItemAsync("token", createdUser.token);
        navManager.NavigateTo("/", true);
    }

    private class TempUser
    {
        public string token = string.Empty;
        public string id = string.Empty;
    }
}